
<!-- TODO: This is the place to test the nvd3 graph only use by reiven(Aki) -->

<main id="test-nvd3">
	<div class="columns">
		<div class="column first-column">
			<h2>Browser and OS Pie chart</h2>
			<svg id="test1" class="mypiechart"></svg>
			<script>
				var $firstColumn = $("first-column");
				var width = $firstColumn.width();
				var height = 350;

				var testdata = [
					{{#each piChartData}}
						{key: "{{key}}", y:{{value}}
						},
					{{/each}}
				];


				nv.addGraph(function() {
					var chart = nv.models.pieChart()
									.x(function(d) { return d.key })
									.y(function(d) { return d.y })
									.width(width)
									.height(height)
									.showTooltipPercent(true)
									.labelThreshold(.05) ;

					d3.select("#test1")
									.datum(testdata)
									.transition().duration(1200)
									.attr('width', width)
									.attr('height', height)
									.call(chart);

					return chart;
				});
			</script>
		</div>
		<div class="column second-column">
			<h2>Size chart</h2>

				<svg id="sizeChart" class="barChart"></svg>

			<script>
			var multiBarHorizontalData={ "values": [{
					key:"Day",
					color:"#67777",
					values:[
						{{#each barChartData1}}
							{label: "{{key}}", value:{{value}}
							},
						{{/each}}
					]
				},
				{
					key:"Night",
					color:"#46994",
					values:[
						{{#each barChartData2}}
							{label: "{{key}}", value:{{value}}
							},
						{{/each}}
					]
				}] };
			</script>
		</div>
	</div>
	<div class="columns">
		<div class="column third-column">
			<h2>line graph</h2>
			<div id="line-chart"></div>

			<script>
				// Wrapping in nv.addGraph allows for '0 timeout render', stores rendered charts in nv.graphs, and may do more in the future... it's NOT required
				var chart;
				var data;
				var legendPosition = "top";


				nv.addGraph(function() {
					chart = nv.models.lineChart()
									.options({
										duration: 300,
										useInteractiveGuideline: true
									})
					;

					// chart sub-models (ie. xAxis, yAxis, etc) when accessed directly, return themselves, not the parent chart, so need to chain separately
					chart.xAxis
									.axisLabel("Time (s)")
									.tickFormat(d3.format(',.1f'))
									.staggerLabels(true)
					;

					chart.yAxis
									.axisLabel('Voltage (v)')
									.tickFormat(function(d) {
										if (d == null) {
											return 'N/A';
										}
										return d3.format(',.2f')(d);
									})
					;

					data = sinAndCos();

					d3.select('#line-chart').append('svg')
									.datum(data)
									.call(chart);

					nv.utils.windowResize(chart.update);

					return chart;
				});

				function sinAndCos() {
					var sin = [],
									sin2 = [],
									cos = [],
									rand = [],
									rand2 = []
									;

					for (var i = 0; i < 100; i++) {
						sin.push({x: i, y: i % 10 == 5 ? null : Math.sin(i/10) }); //the nulls are to show how defined works
						sin2.push({x: i, y: Math.sin(i/5) * 0.4 - 0.25});
						cos.push({x: i, y: .5 * Math.cos(i/10)});
//						rand.push({x:i, y: Math.random() / 10});
//						rand2.push({x: i, y: Math.cos(i/10) + Math.random() / 10 })
					}

					return [
						{
							area: true,
							values: sin,
							key: "Sine Wave",
							color: "#ff7f0e",
							strokeWidth: 4,
							classed: 'dashed'
						},
						{
							values: cos,
							key: "Cosine Wave",
							color: "#2ca02c"
						},
						{
							values: rand,
							key: "Random Points",
							color: "#2222ff"
						},
						{
							values: rand2,
							key: "Random Cosine",
							color: "#667711",
							strokeWidth: 3.5
						},
						{
							area: true,
							values: sin2,
							key: "Fill opacity",
							color: "#EF9CFB",
							fillOpacity: .1
						}
					];
				}
			</script>

		</div>
		<div class="column fourth-column">
            <svg id="scatterTest" class="myscatter"></svg>
            <script>
                nv.addGraph(function() {
                    var chart = nv.models.scatterChart()
                                .showDistX(true)
                                .showDistY(true)
                    .height(height)
                                .color(d3.scale.category10().range());
                    chart.xAxis.tickFormat(d3.format('.02f'));
                    chart.yAxis.tickFormat(d3.format('.02f'));

                    var myData = randomData(2, 40);
                    d3.select('#scatterTest')
                      .datum(myData)
                    .attr('height', height)
                      .call(chart);

                    nv.utils.windowResize(chart.update);

                    return chart;
                });
                var fileTypeData = [
					{{#each fileTypeData}}
                        {file: "{{file}}",
                        requestType: "{{requestType}}",
                        status: "{{status}}"
                        },
					{{/each}}
				];
                //console.log(fileTypeData);
                function randomData(groups, points) {
                    var data = [],
                        shapes = ['circle'],
                        requests = ['POST', 'GET'],
                        random = d3.random.normal();

                    for (i = 0; i < groups; i++) {
                        data.push({
                            key: requests[i],
                            values: []
                        });
                        for (j = 0; j < points; j++) {
                            data[i].values.push({
                                x: random()
                                , y: random()
                                , size: Math.random()
                                , shape: (Math.random() > 0.95) ? shapes[j % 6] : "circle"
                            });
                        }
                    }
                    //console.log(data);
                    return data;
                }
            </script>
		</div>
	</div>
</main>
