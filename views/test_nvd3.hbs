<main id="test-nvd3">
	<div class="tabs is-large">
		<ul>
			<li class="is-active"><a class="switch-graph">Graph</a></li>
			<li><a class="switch-table">Table</a></li>
            <li><a class="switch-predict">Prediction</a></li>
		</ul>
	</div>
	<div id="card">
	<div class="graph">
	<div class="columns">
		<div class="column first-column">
			{{! Aki's part }}
			<h2>Browser and OS Pie chart</h2>
			<svg id="test1" class="mypiechart"></svg>
			<script>
				var $firstColumn = $("first-column");
				var width = $firstColumn.width();
				var height = 350;

				var testdata = [
					{{#each piChartData}}
						{key: "{{key}}", y:{{value}}
						},
					{{/each}}
				];


				nv.addGraph(function() {
					var chart = nv.models.pieChart()
									.x(function(d) { return d.key })
									.y(function(d) { return d.y })
									.width(width)
									.height(height)
									.showTooltipPercent(true)
									.labelThreshold(.05) ;

					d3.select("#test1")
									.datum(testdata)
									.transition().duration(1200)
									.attr('width', width)
									.attr('height', height)
									.call(chart);

					return chart;
				});
			</script>
		</div>
		<div class="column second-column">
			{{! Nishka's part }}
			<h2>Average Data Size chart</h2>

				<svg id="sizeChart" class="barChart"></svg>

			<script>

			var multiBarHorizontalData=[
						{
							key:"AM",
							color:"Red",
							values:[
								{{#each barChartData1}}
									{{#if key}}
											{label: "{{key}}", value:{{value}}
											},
									{{else}}
											{label: "12", value:{{value}}
													},
									{{/if}}
								{{/each}}
							]
						},
						{
							key:"PM",
							color:"Yellow",
							values:[
								{{#each barChartData2}}
									{{#if key}}
											{label: "{{key}}", value:{{value}}
											},
									{{else}}
											{label: "12", value:{{value}}
													},
									{{/if}}
								{{/each}}
							]
						}
					];


				nv.addGraph(function() {
					var chart = nv.models.multiBarHorizontalChart()
							.x(function(d) { return d.label })
							.y(function(d) { return d.value })
							.margin({top: 30, right: 20, bottom: 50, left: 75})
							.showValues(true)           //Show bar value next to each bar.
							.showControls(true);        //Allow user to switch between "Grouped" and "Stacked" mode.

					chart.yAxis
							.tickFormat(d3.format(',.2f'));

					d3.select('#sizeChart')
							.datum(multiBarHorizontalData)
							.call(chart);

					nv.utils.windowResize(chart.update);

					return chart;
				});

			</script>
		</div>
		</div>
	<div class="columns">
		<div class="column third-column">
			{{! Vaybhav's part }}
			<h2>bar graph</h2>
			<div id="bar-chart">
			<svg id="barGraph"></svg>

				<script>

					var historicalBarChart=[
						{
							key : "Cumulative Return",
							values:[
								{{#each bardata}}
									{
										label: "{{label}}",
										value:"{{value}}"
									},
								{{/each}}
							]
						}
					];
					console.log(historicalBarChart);

					nv.addGraph(function() {
			        var chart = nv.models.discreteBarChart()
			            .x(function(d) { return d.label+":00" })
			            .y(function(d) { return d.value })
			            .staggerLabels(true)
			            //.staggerLabels(historicalBarChart[0].values.length > 8)
			            .showValues(true)
			            .duration(250)
			            ;

				        d3.select('#barGraph')
				            .datum(historicalBarChart)
				            .call(chart);

				        nv.utils.windowResize(chart.update);
				        return chart;
				    });

				</script>
				</div>
			</div>
		<div class="column fourth-column">
			{{! Lakshya's part }}
            <svg id="scatterTest" class="with-3d-shadow with-transitions"></svg>
            <script>
                var fileTypeData = [
					{{#each fileTypeData}}
                        {file: "{{file}}",
                        requestType: "{{requestType}}",
                        status: "{{status}}"
                        },
					{{/each}}
				];
                fileDataTypes = fileTypeDataFunc(fileTypeData);

                var chart;
                nv.addGraph(function() {
                    chart = nv.models.multiBarHorizontalChart()
                        .x(function(d) { return d.label })
                        .y(function(d) { return d.value })
                        .yErr(function(d) { return [-Math.abs(d.value * Math.random() * 0.3), Math.abs(d.value * Math.random() * 0.3)] })
                        .barColor(d3.scale.category20().range())
                        .duration(250)
                        .margin({left: 100})
                        .stacked(true);

                    chart.yAxis.tickFormat(d3.format(',.2f'));

                    chart.yAxis.axisLabel('Number of Requests');
                    chart.xAxis.axisLabel('File Types').axisLabelDistance(20);

                    d3.select('#scatterTest')
                        .datum(fileDataTypes)
                        .call(chart);

                    nv.utils.windowResize(chart.update);

                    chart.dispatch.on('stateChange', function(e) { nv.log('New State:', JSON.stringify(e)); });
                    chart.state.dispatch.on('change', function(state){
                        nv.log('state', JSON.stringify(state));
                    });
                    return chart;
                });
            </script>
		</div>
	</div>
	</div>
	<!-- table area -->
	<div class="table">
		<div class="columns">
			<div class="column first-column">
				{{! Aki's part}}
				<h2>Browser Table</h2>
				<div>
					<table id="piTable2"></table>
					<script>
						var piTableValues=[
							{{#each piTableData}}
								{
									"OS": "{{OS}}",
									"Browser": "{{browser}}",
									"Amount": "{{amount}}",
									"Rate": "{{rate}}"
								},
							{{/each}}
						];



						d3.select("#piTable2").selectAll("table")
										.data([piTableValues])
										.enter().append("table")
										.call(recurse);
					</script>
				</div>

<!-- Aki zone -->
			</div>
			<div class="column second-column">
				{{! Nishka's part }}

				<h2>Average Data Size Table</h2>
				<div class="column-main">
					<table id="sizeTable"></table>
					<script>
					var multiBarHorizontalData2=[
					{
						"AM":[
							{{#each barChartData1}}
								{{#if key}}
										{"Time": "{{key}}", "Size (kb)":{{value}}
										},
								{{else}}
										{"Time": "12", "Size (kb)":{{value}}
										},
									{{/if}}
							{{/each}}
						],
						"PM":[
							{{#each barChartData2}}
							{{#if key}}
									{"Time": "{{key}}", "Size (kb)":{{value}}
									},
							{{else}}
									{"Time": "12", "Size (kb)":{{value}}
									},
								{{/if}}
							{{/each}}
						]
					}
				];

				d3.select("#sizeTable").selectAll("table")
						.data([multiBarHorizontalData2])
					.enter().append("table")
						.call(recurse);
					</script>

					</div>

				</div>
			<!-- </div>

		<div class="columns"> -->
			<div class="column third-column">
				{{! Vaybhav's part }}
				<h2>Time v/s Hits Table</h2>

				<table id="barDisplayTable"></table>
				<script>
					var barDataValues=[
						{{#each bardata}}
							{
								Time: "{{label}}"+":00",
								Hits:"{{value}}"
							},
						{{/each}}
					];



					d3.select("#barDisplayTable").selectAll("table")
                            .data([barDataValues])
                          .enter().append("table")
                            .call(recurse);
				</script>
			</div>
			<div class="column fourth-column">
				{{! Lakshya's part }}
                <h2>File Type Tables</h2>
				<div class="column-main" >
                    <table id="scatterTable"></table>
                    <script>
                        var fileTypeData = [
                                            {{#each fileTypeData}}
                                                {file: "{{file}}",
                                                requestType: "{{requestType}}",
                                                status: "{{status}}"
                                                },
                                            {{/each}}
                                        ];
                        fileDataTypes = fileTypeDataFunc(fileTypeData);
                        var temp = {};
                        var updatedDataModel = [];
                        var tempFile = [];

                        fileDataTypes.forEach(function(a){
                            temp = {};
                            tempFile = [];
                            temp["Request"] = a.key;
                            var tempFileCount = {};
                            (a.values).forEach(function(x){
                                tempFileCount = {};
                                tempFileCount["Type"] = x.label;
                                tempFileCount["Count"] = x.value;
                                tempFile.push(tempFileCount);
                            });
                            temp["Files"] = tempFile;
                            updatedDataModel.push(temp);
                        });

                        d3.select("#scatterTable").selectAll("table")
                            .data([updatedDataModel])
                          .enter().append("table")
                            .call(recurse);
                    </script>
				</div>
			</div>
		</div>
	</div>
	</div>
	<div id="prediction">
       <section class="section">
           <div class="container is-widescreen">

               <script>
                    var res =[{{result}}];

                    function drawResult()
                    {

                            var time = document.getElementById('myTime').value;
                            var hm=(time.split(":"));
                            var x=parseInt(hm[0])+parseInt(hm[1])/100;
                            var pred = Math.round(res[0]*Math.pow(x,3)+res[1]*Math.pow(x,2)+res[2]*Math.pow(x,1)+res[3],2);
                            if(pred<0){
                            	pred=0;
                            }
                            document.getElementById("y").innerHTML="Predicted Hits = "+pred;
                    }
               </script>
               <div class="box">
               		<h1 class="title is-6">Enter time and find the predicted hits </h1>
               		<input type="time" class="control" name="myTime" id="myTime" />
               		<input type="button" class="button is-dark is-small" id="btnrefresh" value="Enter" onclick="drawResult();" />
               		<br><br>
                    <b><label class="tag is-light" id="y" style="color: green">Hit Counts To Be Displayed Here</label></b>

               </div>
            </div>
        </section>
	</div>
</main>
