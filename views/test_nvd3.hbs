


<main id="test-nvd3">
	<div class="tabs is-large">
		<ul>
			<li class="is-active"><a class="switch-graph">Graph</a></li>
			<li><a class="switch-table">Table</a></li>
		</ul>
	</div>
	<div id="card">
	<div class="graph">
	<div class="columns">
		<div class="column first-column">
			<h2>Browser and OS Pie chart</h2>
			<svg id="test1" class="mypiechart"></svg>
			<script>
				var $firstColumn = $("first-column");
				var width = $firstColumn.width();
				var height = 350;

				var testdata = [
					{{#each piChartData}}
						{key: "{{key}}", y:{{value}}
						},
					{{/each}}
				];


				nv.addGraph(function() {
					var chart = nv.models.pieChart()
									.x(function(d) { return d.key })
									.y(function(d) { return d.y })
									.width(width)
									.height(height)
									.showTooltipPercent(true)
									.labelThreshold(.05) ;

					d3.select("#test1")
									.datum(testdata)
									.transition().duration(1200)
									.attr('width', width)
									.attr('height', height)
									.call(chart);

					return chart;
				});
			</script>
		</div>
		<div class="column second-column">
			<h2>Size chart</h2>

				<svg id="sizeChart" class="barChart"></svg>

			<script>

			var multiBarHorizontalData=[
			{
				key:"Day",
				color:"Red",
				values:[
					{{#each barChartData1}}
						{label: "{{key}}", value:{{value}}
						},
					{{/each}}
				]
			},
			{
				key:"Night",
				color:"Yellow",
				values:[
					{{#each barChartData2}}
						{label: "{{key}}", value:{{value}}
						},
					{{/each}}
				]
			}
		];

				nv.addGraph(function() {
					var chart = nv.models.multiBarHorizontalChart()
							.x(function(d) { return d.label })
							.y(function(d) { return d.value })
							.margin({top: 30, right: 20, bottom: 50, left: 75})
							.showValues(true)           //Show bar value next to each bar.
							.showControls(true);        //Allow user to switch between "Grouped" and "Stacked" mode.

					chart.yAxis
							.tickFormat(d3.format(',.2f'));

					d3.select('#sizeChart')
							.datum(multiBarHorizontalData)
							.call(chart);

					nv.utils.windowResize(chart.update);

					return chart;
				});

			</script>
		</div>
		</div>
	<div class="columns">
		<div class="column third-column">
			<h2>line graph</h2>
			<div id="line-chart"></div>

			<script>
				// Wrapping in nv.addGraph allows for '0 timeout render', stores rendered charts in nv.graphs, and may do more in the future... it's NOT required
				var chart;
				var data;
				var legendPosition = "top";


				nv.addGraph(function() {
					chart = nv.models.lineChart()
									.options({
										duration: 300,
										useInteractiveGuideline: true
									})
					;

					// chart sub-models (ie. xAxis, yAxis, etc) when accessed directly, return themselves, not the parent chart, so need to chain separately
					chart.xAxis
									.axisLabel("Time (s)")
									.tickFormat(d3.format(',.1f'))
									.staggerLabels(true)
					;

					chart.yAxis
									.axisLabel('Voltage (v)')
									.tickFormat(function(d) {
										if (d == null) {
											return 'N/A';
										}
										return d3.format(',.2f')(d);
									})
					;

					data = sinAndCos();

					d3.select('#line-chart').append('svg')
									.datum(data)
									.call(chart);

					nv.utils.windowResize(chart.update);

					return chart;
				});

				function sinAndCos() {
					var sin = [],
									sin2 = [],
									cos = [],
									rand = [],
									rand2 = []
									;

					for (var i = 0; i < 100; i++) {
						sin.push({x: i, y: i % 10 == 5 ? null : Math.sin(i/10) }); //the nulls are to show how defined works
						sin2.push({x: i, y: Math.sin(i/5) * 0.4 - 0.25});
						cos.push({x: i, y: .5 * Math.cos(i/10)});
//						rand.push({x:i, y: Math.random() / 10});
//						rand2.push({x: i, y: Math.cos(i/10) + Math.random() / 10 })
					}

					return [
						{
							area: true,
							values: sin,
							key: "Sine Wave",
							color: "#ff7f0e",
							strokeWidth: 4,
							classed: 'dashed'
						},
						{
							values: cos,
							key: "Cosine Wave",
							color: "#2ca02c"
						},
						{
							values: rand,
							key: "Random Points",
							color: "#2222ff"
						},
						{
							values: rand2,
							key: "Random Cosine",
							color: "#667711",
							strokeWidth: 3.5
						},
						{
							area: true,
							values: sin2,
							key: "Fill opacity",
							color: "#EF9CFB",
							fillOpacity: .1
						}
					];
				}
			</script>

		</div>
		<div class="column fourth-column">
            <svg id="scatterTest" class="with-3d-shadow with-transitions"></svg>
            <script>
                var fileTypeData = [
					{{#each fileTypeData}}
                        {file: "{{file}}",
                        requestType: "{{requestType}}",
                        status: "{{status}}"
                        },
					{{/each}}
				];
                var GETCount = [];
                var POSTCount = [];
                fileTypeData.forEach(function(x) { 
                    if(x.requestType == "GET "){
                        var tmp = GETCount.findIndex(f => f.label == x.file);
                        if(tmp !== -1){
                            GETCount[tmp].value += 1;
                        }else{
                            GETCount.push({label:x.file, value:1})
                        }
                    }else{
                        var tmp = POSTCount.findIndex(f => f.label == x.file);
                        if(tmp !== -1){
                            POSTCount[tmp].value += 1;
                        }else{
                            POSTCount.push({label:x.file, value:1})
                        }
                    }
                });
                var doubleBarObj = [];
                var fileDataTypes = [];
                doubleBarObj = {key:"POST", values: POSTCount};
                fileDataTypes.push(doubleBarObj);
                doubleBarObj = {key:"GET", values: GETCount};
                fileDataTypes.push(doubleBarObj);
                console.log(fileDataTypes);
                
                var chart;
                nv.addGraph(function() {
                    chart = nv.models.multiBarHorizontalChart()
                        .x(function(d) { return d.label })
                        .y(function(d) { return d.value })
                        .yErr(function(d) { return [-Math.abs(d.value * Math.random() * 0.3), Math.abs(d.value * Math.random() * 0.3)] })
                        .barColor(d3.scale.category20().range())
                        .duration(250)
                        .margin({left: 100})
                        .stacked(true);

                    chart.yAxis.tickFormat(d3.format(',.2f'));

                    chart.yAxis.axisLabel('Number of Requests');
                    chart.xAxis.axisLabel('File Types').axisLabelDistance(20);

                    d3.select('#scatterTest')
                        .datum(fileDataTypes)
                        .call(chart);

                    nv.utils.windowResize(chart.update);

                    chart.dispatch.on('stateChange', function(e) { nv.log('New State:', JSON.stringify(e)); });
                    chart.state.dispatch.on('change', function(state){
                        nv.log('state', JSON.stringify(state));
                    });
                    return chart;
                });
            </script>
		</div>
	</div>
	</div>
	<!-- table area -->
	<div class="table">
		<script>
			function tableMod(query){
				$(query).each(function () {
					var pre_element = null;
					var col_num = 0;
					$(this).find('tr').each(function () {
						var now_th = $(this).find('th').eq( col_num );
						if (pre_element == null) {
							pre_element = now_th;
						} else if (now_th.text() == pre_element.text()) {
							now_th.remove();
							if (pre_element.attr('rowspan') == null) pre_element.attr('rowspan', 1);
							pre_element.attr('rowspan', parseInt(pre_element.attr('rowspan'),10) + 1);
						} else {
							pre_element = now_th;
						}
					});
				});

			}
		</script>
		<div class="columns">
			<div class="column first-column">
				<h2>Browser Table</h2>
				<div class="">
					<table class="table is-bordered is-striped is-narrow is-fullwidth">
						<tbody>
						<tr>
							<td></td>
							<td></td>
						</tr>
						</tbody>
					</table>
				</div>

<!-- Aki zone -->
			</div>
			<div class="column second-column">
				<h2>Size chart</h2>

			</div>
		</div>
		<div class="columns">
			<div class="column third-column">



			</div>
			<div class="column fourth-column">

			</div>
		</div>
	</div>
	</div>
</main>
